/*
ProxMox VE API

ProxMox VE API

API version: 8.3
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the ResumeVMRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResumeVMRequest{}

// ResumeVMRequest struct for ResumeVMRequest
type ResumeVMRequest struct {
	Nocheck *bool `json:"nocheck,omitempty"`
	Skiplock *bool `json:"skiplock,omitempty"`
}

// NewResumeVMRequest instantiates a new ResumeVMRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResumeVMRequest() *ResumeVMRequest {
	this := ResumeVMRequest{}
	return &this
}

// NewResumeVMRequestWithDefaults instantiates a new ResumeVMRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResumeVMRequestWithDefaults() *ResumeVMRequest {
	this := ResumeVMRequest{}
	return &this
}

// GetNocheck returns the Nocheck field value if set, zero value otherwise.
func (o *ResumeVMRequest) GetNocheck() bool {
	if o == nil || IsNil(o.Nocheck) {
		var ret bool
		return ret
	}
	return *o.Nocheck
}

// GetNocheckOk returns a tuple with the Nocheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResumeVMRequest) GetNocheckOk() (*bool, bool) {
	if o == nil || IsNil(o.Nocheck) {
		return nil, false
	}
	return o.Nocheck, true
}

// HasNocheck returns a boolean if a field has been set.
func (o *ResumeVMRequest) HasNocheck() bool {
	if o != nil && !IsNil(o.Nocheck) {
		return true
	}

	return false
}

// SetNocheck gets a reference to the given bool and assigns it to the Nocheck field.
func (o *ResumeVMRequest) SetNocheck(v bool) {
	o.Nocheck = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *ResumeVMRequest) GetSkiplock() bool {
	if o == nil || IsNil(o.Skiplock) {
		var ret bool
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResumeVMRequest) GetSkiplockOk() (*bool, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *ResumeVMRequest) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given bool and assigns it to the Skiplock field.
func (o *ResumeVMRequest) SetSkiplock(v bool) {
	o.Skiplock = &v
}

func (o ResumeVMRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResumeVMRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nocheck) {
		toSerialize["nocheck"] = o.Nocheck
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	return toSerialize, nil
}

type NullableResumeVMRequest struct {
	value *ResumeVMRequest
	isSet bool
}

func (v NullableResumeVMRequest) Get() *ResumeVMRequest {
	return v.value
}

func (v *NullableResumeVMRequest) Set(val *ResumeVMRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResumeVMRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResumeVMRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResumeVMRequest(val *ResumeVMRequest) *NullableResumeVMRequest {
	return &NullableResumeVMRequest{value: val, isSet: true}
}

func (v NullableResumeVMRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResumeVMRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


