/*
ProxMox VE API

ProxMox VE API

API version: 8.3
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the StopContainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopContainerRequest{}

// StopContainerRequest struct for StopContainerRequest
type StopContainerRequest struct {
	// Try to abort active 'vzshutdown' tasks before stopping.
	OverruleShutdown *bool `json:"overrule-shutdown,omitempty"`
	// Ignore locks - only root is allowed to use this option.
	Skiplock *bool `json:"skiplock,omitempty"`
}

// NewStopContainerRequest instantiates a new StopContainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopContainerRequest() *StopContainerRequest {
	this := StopContainerRequest{}
	return &this
}

// NewStopContainerRequestWithDefaults instantiates a new StopContainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopContainerRequestWithDefaults() *StopContainerRequest {
	this := StopContainerRequest{}
	return &this
}

// GetOverruleShutdown returns the OverruleShutdown field value if set, zero value otherwise.
func (o *StopContainerRequest) GetOverruleShutdown() bool {
	if o == nil || IsNil(o.OverruleShutdown) {
		var ret bool
		return ret
	}
	return *o.OverruleShutdown
}

// GetOverruleShutdownOk returns a tuple with the OverruleShutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopContainerRequest) GetOverruleShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.OverruleShutdown) {
		return nil, false
	}
	return o.OverruleShutdown, true
}

// HasOverruleShutdown returns a boolean if a field has been set.
func (o *StopContainerRequest) HasOverruleShutdown() bool {
	if o != nil && !IsNil(o.OverruleShutdown) {
		return true
	}

	return false
}

// SetOverruleShutdown gets a reference to the given bool and assigns it to the OverruleShutdown field.
func (o *StopContainerRequest) SetOverruleShutdown(v bool) {
	o.OverruleShutdown = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *StopContainerRequest) GetSkiplock() bool {
	if o == nil || IsNil(o.Skiplock) {
		var ret bool
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopContainerRequest) GetSkiplockOk() (*bool, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *StopContainerRequest) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given bool and assigns it to the Skiplock field.
func (o *StopContainerRequest) SetSkiplock(v bool) {
	o.Skiplock = &v
}

func (o StopContainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopContainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OverruleShutdown) {
		toSerialize["overrule-shutdown"] = o.OverruleShutdown
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	return toSerialize, nil
}

type NullableStopContainerRequest struct {
	value *StopContainerRequest
	isSet bool
}

func (v NullableStopContainerRequest) Get() *StopContainerRequest {
	return v.value
}

func (v *NullableStopContainerRequest) Set(val *StopContainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStopContainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStopContainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopContainerRequest(val *StopContainerRequest) *NullableStopContainerRequest {
	return &NullableStopContainerRequest{value: val, isSet: true}
}

func (v NullableStopContainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopContainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


