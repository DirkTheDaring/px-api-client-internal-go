/*
ProxMox VE API

ProxMox VE API

API version: 8.3
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the StopVMRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopVMRequest{}

// StopVMRequest struct for StopVMRequest
type StopVMRequest struct {
	KeepActive *bool `json:"keepActive,omitempty"`
	Migratedfrom *string `json:"migratedfrom,omitempty"`
	OverruleShutdown *bool `json:"overrule-shutdown,omitempty"`
	Skiplock *bool `json:"skiplock,omitempty"`
	Timeout *int64 `json:"timeout,omitempty"`
}

// NewStopVMRequest instantiates a new StopVMRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopVMRequest() *StopVMRequest {
	this := StopVMRequest{}
	return &this
}

// NewStopVMRequestWithDefaults instantiates a new StopVMRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopVMRequestWithDefaults() *StopVMRequest {
	this := StopVMRequest{}
	return &this
}

// GetKeepActive returns the KeepActive field value if set, zero value otherwise.
func (o *StopVMRequest) GetKeepActive() bool {
	if o == nil || IsNil(o.KeepActive) {
		var ret bool
		return ret
	}
	return *o.KeepActive
}

// GetKeepActiveOk returns a tuple with the KeepActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVMRequest) GetKeepActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepActive) {
		return nil, false
	}
	return o.KeepActive, true
}

// HasKeepActive returns a boolean if a field has been set.
func (o *StopVMRequest) HasKeepActive() bool {
	if o != nil && !IsNil(o.KeepActive) {
		return true
	}

	return false
}

// SetKeepActive gets a reference to the given bool and assigns it to the KeepActive field.
func (o *StopVMRequest) SetKeepActive(v bool) {
	o.KeepActive = &v
}

// GetMigratedfrom returns the Migratedfrom field value if set, zero value otherwise.
func (o *StopVMRequest) GetMigratedfrom() string {
	if o == nil || IsNil(o.Migratedfrom) {
		var ret string
		return ret
	}
	return *o.Migratedfrom
}

// GetMigratedfromOk returns a tuple with the Migratedfrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVMRequest) GetMigratedfromOk() (*string, bool) {
	if o == nil || IsNil(o.Migratedfrom) {
		return nil, false
	}
	return o.Migratedfrom, true
}

// HasMigratedfrom returns a boolean if a field has been set.
func (o *StopVMRequest) HasMigratedfrom() bool {
	if o != nil && !IsNil(o.Migratedfrom) {
		return true
	}

	return false
}

// SetMigratedfrom gets a reference to the given string and assigns it to the Migratedfrom field.
func (o *StopVMRequest) SetMigratedfrom(v string) {
	o.Migratedfrom = &v
}

// GetOverruleShutdown returns the OverruleShutdown field value if set, zero value otherwise.
func (o *StopVMRequest) GetOverruleShutdown() bool {
	if o == nil || IsNil(o.OverruleShutdown) {
		var ret bool
		return ret
	}
	return *o.OverruleShutdown
}

// GetOverruleShutdownOk returns a tuple with the OverruleShutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVMRequest) GetOverruleShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.OverruleShutdown) {
		return nil, false
	}
	return o.OverruleShutdown, true
}

// HasOverruleShutdown returns a boolean if a field has been set.
func (o *StopVMRequest) HasOverruleShutdown() bool {
	if o != nil && !IsNil(o.OverruleShutdown) {
		return true
	}

	return false
}

// SetOverruleShutdown gets a reference to the given bool and assigns it to the OverruleShutdown field.
func (o *StopVMRequest) SetOverruleShutdown(v bool) {
	o.OverruleShutdown = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *StopVMRequest) GetSkiplock() bool {
	if o == nil || IsNil(o.Skiplock) {
		var ret bool
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVMRequest) GetSkiplockOk() (*bool, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *StopVMRequest) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given bool and assigns it to the Skiplock field.
func (o *StopVMRequest) SetSkiplock(v bool) {
	o.Skiplock = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *StopVMRequest) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVMRequest) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *StopVMRequest) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *StopVMRequest) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o StopVMRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopVMRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeepActive) {
		toSerialize["keepActive"] = o.KeepActive
	}
	if !IsNil(o.Migratedfrom) {
		toSerialize["migratedfrom"] = o.Migratedfrom
	}
	if !IsNil(o.OverruleShutdown) {
		toSerialize["overrule-shutdown"] = o.OverruleShutdown
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableStopVMRequest struct {
	value *StopVMRequest
	isSet bool
}

func (v NullableStopVMRequest) Get() *StopVMRequest {
	return v.value
}

func (v *NullableStopVMRequest) Set(val *StopVMRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStopVMRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStopVMRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopVMRequest(val *StopVMRequest) *NullableStopVMRequest {
	return &NullableStopVMRequest{value: val, isSet: true}
}

func (v NullableStopVMRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopVMRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


