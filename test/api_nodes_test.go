/*
ProxMox VE API

Testing NodesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pxapiobject

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/DirkTheDaring/px-api-client-internal-go"
)

func Test_pxapiobject_NodesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NodesAPIService CreateContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.CreateContainer(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService CreateContainerSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.CreateContainerSnapshot(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService CreateNodesSingleStorageSingleContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var storage string

		resp, httpRes, err := apiClient.NodesAPI.CreateNodesSingleStorageSingleContent(context.Background(), node, storage).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService CreateVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.CreateVM(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService CreateVMSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.CreateVMSnapshot(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService DeleteContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.DeleteContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService DeleteContainerSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.DeleteContainerSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService DeleteVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.DeleteVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService DeleteVMSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.DeleteVMSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetContainerConfig(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerConfigPending", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetContainerConfigPending(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.GetContainerSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerSnapshotConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.GetContainerSnapshotConfig(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetContainerSnapshots(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetContainerStatus(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.GetContainers(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetCurrentContainerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetCurrentContainerStatus(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetCurrentVMStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetCurrentVMStatus(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetNodeTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var upid string

		resp, httpRes, err := apiClient.NodesAPI.GetNodeTask(context.Background(), node, upid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetNodeTaskLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var upid string

		resp, httpRes, err := apiClient.NodesAPI.GetNodeTaskLog(context.Background(), node, upid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetNodeTaskStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var upid string

		resp, httpRes, err := apiClient.NodesAPI.GetNodeTaskStatus(context.Background(), node, upid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetNodeTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.GetNodeTasks(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetStorageContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var storage string

		resp, httpRes, err := apiClient.NodesAPI.GetStorageContent(context.Background(), node, storage).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetStorages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.GetStorages(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetVMConfig(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMConfigPending", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetVMConfigPending(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.GetVMSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMSnapshotConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.GetVMSnapshotConfig(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.GetVMSnapshots(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService GetVMs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string

		resp, httpRes, err := apiClient.NodesAPI.GetVMs(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService RebootContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.RebootContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService RebootVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.RebootVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ResizeContainerDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ResizeContainerDisk(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ResizeVMDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ResizeVMDisk(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ResumeContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ResumeContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ResumeVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ResumeVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService RollbackContainerSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.RollbackContainerSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService RollbackVMSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.RollbackVMSnapshot(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ShutdownContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ShutdownContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService ShutdownVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.ShutdownVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService StartContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.StartContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService StartVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.StartVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService StopContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.StopContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService StopNodeTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var upid string

		resp, httpRes, err := apiClient.NodesAPI.StopNodeTask(context.Background(), node, upid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService StopVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.StopVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService SuspendContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.SuspendContainer(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService SuspendVM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.SuspendVM(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UpdateContainerConfigSync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.UpdateContainerConfigSync(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UpdateContainerSnapshotConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.UpdateContainerSnapshotConfig(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UpdateVMConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.UpdateVMConfig(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UpdateVMConfigSync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64

		resp, httpRes, err := apiClient.NodesAPI.UpdateVMConfigSync(context.Background(), node, vmid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UpdateVMSnapshotConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var vmid int64
		var snapname string

		resp, httpRes, err := apiClient.NodesAPI.UpdateVMSnapshotConfig(context.Background(), node, vmid, snapname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NodesAPIService UploadFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var node string
		var storage string

		resp, httpRes, err := apiClient.NodesAPI.UploadFile(context.Background(), node, storage).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
