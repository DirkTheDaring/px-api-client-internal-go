/*
ProxMox VE API

ProxMox VE API

API version: 8.0
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the ShutdownVMRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShutdownVMRequest{}

// ShutdownVMRequest struct for ShutdownVMRequest
type ShutdownVMRequest struct {
	// Make sure the VM stops.
	ForceStop *bool `json:"forceStop,omitempty"`
	// Do not deactivate storage volumes.
	KeepActive *bool `json:"keepActive,omitempty"`
	// Ignore locks - only root is allowed to use this option.
	Skiplock *bool `json:"skiplock,omitempty"`
	// Wait maximal timeout seconds.
	Timeout *int64 `json:"timeout,omitempty"`
}

// NewShutdownVMRequest instantiates a new ShutdownVMRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShutdownVMRequest() *ShutdownVMRequest {
	this := ShutdownVMRequest{}
	return &this
}

// NewShutdownVMRequestWithDefaults instantiates a new ShutdownVMRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShutdownVMRequestWithDefaults() *ShutdownVMRequest {
	this := ShutdownVMRequest{}
	return &this
}

// GetForceStop returns the ForceStop field value if set, zero value otherwise.
func (o *ShutdownVMRequest) GetForceStop() bool {
	if o == nil || IsNil(o.ForceStop) {
		var ret bool
		return ret
	}
	return *o.ForceStop
}

// GetForceStopOk returns a tuple with the ForceStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVMRequest) GetForceStopOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceStop) {
		return nil, false
	}
	return o.ForceStop, true
}

// HasForceStop returns a boolean if a field has been set.
func (o *ShutdownVMRequest) HasForceStop() bool {
	if o != nil && !IsNil(o.ForceStop) {
		return true
	}

	return false
}

// SetForceStop gets a reference to the given bool and assigns it to the ForceStop field.
func (o *ShutdownVMRequest) SetForceStop(v bool) {
	o.ForceStop = &v
}

// GetKeepActive returns the KeepActive field value if set, zero value otherwise.
func (o *ShutdownVMRequest) GetKeepActive() bool {
	if o == nil || IsNil(o.KeepActive) {
		var ret bool
		return ret
	}
	return *o.KeepActive
}

// GetKeepActiveOk returns a tuple with the KeepActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVMRequest) GetKeepActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepActive) {
		return nil, false
	}
	return o.KeepActive, true
}

// HasKeepActive returns a boolean if a field has been set.
func (o *ShutdownVMRequest) HasKeepActive() bool {
	if o != nil && !IsNil(o.KeepActive) {
		return true
	}

	return false
}

// SetKeepActive gets a reference to the given bool and assigns it to the KeepActive field.
func (o *ShutdownVMRequest) SetKeepActive(v bool) {
	o.KeepActive = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *ShutdownVMRequest) GetSkiplock() bool {
	if o == nil || IsNil(o.Skiplock) {
		var ret bool
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVMRequest) GetSkiplockOk() (*bool, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *ShutdownVMRequest) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given bool and assigns it to the Skiplock field.
func (o *ShutdownVMRequest) SetSkiplock(v bool) {
	o.Skiplock = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ShutdownVMRequest) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVMRequest) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ShutdownVMRequest) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *ShutdownVMRequest) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o ShutdownVMRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShutdownVMRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceStop) {
		toSerialize["forceStop"] = o.ForceStop
	}
	if !IsNil(o.KeepActive) {
		toSerialize["keepActive"] = o.KeepActive
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableShutdownVMRequest struct {
	value *ShutdownVMRequest
	isSet bool
}

func (v NullableShutdownVMRequest) Get() *ShutdownVMRequest {
	return v.value
}

func (v *NullableShutdownVMRequest) Set(val *ShutdownVMRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableShutdownVMRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableShutdownVMRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShutdownVMRequest(val *ShutdownVMRequest) *NullableShutdownVMRequest {
	return &NullableShutdownVMRequest{value: val, isSet: true}
}

func (v NullableShutdownVMRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShutdownVMRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


