/*
ProxMox VE API

ProxMox VE API

API version: 8.3
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
	"fmt"
)

// GetVMConfigPending200ResponseDataInner - struct for GetVMConfigPending200ResponseDataInner
type GetVMConfigPending200ResponseDataInner struct {
	GetVMConfigPending200ResponseDataInnerOneOf *GetVMConfigPending200ResponseDataInnerOneOf
	GetVMConfigPending200ResponseDataInnerOneOf1 *GetVMConfigPending200ResponseDataInnerOneOf1
}

// GetVMConfigPending200ResponseDataInnerOneOfAsGetVMConfigPending200ResponseDataInner is a convenience function that returns GetVMConfigPending200ResponseDataInnerOneOf wrapped in GetVMConfigPending200ResponseDataInner
func GetVMConfigPending200ResponseDataInnerOneOfAsGetVMConfigPending200ResponseDataInner(v *GetVMConfigPending200ResponseDataInnerOneOf) GetVMConfigPending200ResponseDataInner {
	return GetVMConfigPending200ResponseDataInner{
		GetVMConfigPending200ResponseDataInnerOneOf: v,
	}
}

// GetVMConfigPending200ResponseDataInnerOneOf1AsGetVMConfigPending200ResponseDataInner is a convenience function that returns GetVMConfigPending200ResponseDataInnerOneOf1 wrapped in GetVMConfigPending200ResponseDataInner
func GetVMConfigPending200ResponseDataInnerOneOf1AsGetVMConfigPending200ResponseDataInner(v *GetVMConfigPending200ResponseDataInnerOneOf1) GetVMConfigPending200ResponseDataInner {
	return GetVMConfigPending200ResponseDataInner{
		GetVMConfigPending200ResponseDataInnerOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetVMConfigPending200ResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetVMConfigPending200ResponseDataInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.GetVMConfigPending200ResponseDataInnerOneOf)
	if err == nil {
		jsonGetVMConfigPending200ResponseDataInnerOneOf, _ := json.Marshal(dst.GetVMConfigPending200ResponseDataInnerOneOf)
		if string(jsonGetVMConfigPending200ResponseDataInnerOneOf) == "{}" { // empty struct
			dst.GetVMConfigPending200ResponseDataInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.GetVMConfigPending200ResponseDataInnerOneOf = nil
	}

	// try to unmarshal data into GetVMConfigPending200ResponseDataInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.GetVMConfigPending200ResponseDataInnerOneOf1)
	if err == nil {
		jsonGetVMConfigPending200ResponseDataInnerOneOf1, _ := json.Marshal(dst.GetVMConfigPending200ResponseDataInnerOneOf1)
		if string(jsonGetVMConfigPending200ResponseDataInnerOneOf1) == "{}" { // empty struct
			dst.GetVMConfigPending200ResponseDataInnerOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.GetVMConfigPending200ResponseDataInnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetVMConfigPending200ResponseDataInnerOneOf = nil
		dst.GetVMConfigPending200ResponseDataInnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetVMConfigPending200ResponseDataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetVMConfigPending200ResponseDataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetVMConfigPending200ResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.GetVMConfigPending200ResponseDataInnerOneOf != nil {
		return json.Marshal(&src.GetVMConfigPending200ResponseDataInnerOneOf)
	}

	if src.GetVMConfigPending200ResponseDataInnerOneOf1 != nil {
		return json.Marshal(&src.GetVMConfigPending200ResponseDataInnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetVMConfigPending200ResponseDataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetVMConfigPending200ResponseDataInnerOneOf != nil {
		return obj.GetVMConfigPending200ResponseDataInnerOneOf
	}

	if obj.GetVMConfigPending200ResponseDataInnerOneOf1 != nil {
		return obj.GetVMConfigPending200ResponseDataInnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableGetVMConfigPending200ResponseDataInner struct {
	value *GetVMConfigPending200ResponseDataInner
	isSet bool
}

func (v NullableGetVMConfigPending200ResponseDataInner) Get() *GetVMConfigPending200ResponseDataInner {
	return v.value
}

func (v *NullableGetVMConfigPending200ResponseDataInner) Set(val *GetVMConfigPending200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVMConfigPending200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVMConfigPending200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVMConfigPending200ResponseDataInner(val *GetVMConfigPending200ResponseDataInner) *NullableGetVMConfigPending200ResponseDataInner {
	return &NullableGetVMConfigPending200ResponseDataInner{value: val, isSet: true}
}

func (v NullableGetVMConfigPending200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVMConfigPending200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


