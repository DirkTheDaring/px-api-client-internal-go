/*
ProxMox VE API

ProxMox VE API

API version: 8.0
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the SuspendVMRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuspendVMRequest{}

// SuspendVMRequest struct for SuspendVMRequest
type SuspendVMRequest struct {
	// Ignore locks - only root is allowed to use this option.
	Skiplock *int32 `json:"skiplock,omitempty"`
	// The storage for the VM state
	Statestorage *string `json:"statestorage,omitempty"`
	// If set, suspends the VM to disk. Will be resumed on next VM start.
	Todisk *int32 `json:"todisk,omitempty"`
}

// NewSuspendVMRequest instantiates a new SuspendVMRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuspendVMRequest() *SuspendVMRequest {
	this := SuspendVMRequest{}
	return &this
}

// NewSuspendVMRequestWithDefaults instantiates a new SuspendVMRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuspendVMRequestWithDefaults() *SuspendVMRequest {
	this := SuspendVMRequest{}
	return &this
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *SuspendVMRequest) GetSkiplock() int32 {
	if o == nil || IsNil(o.Skiplock) {
		var ret int32
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVMRequest) GetSkiplockOk() (*int32, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *SuspendVMRequest) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given int32 and assigns it to the Skiplock field.
func (o *SuspendVMRequest) SetSkiplock(v int32) {
	o.Skiplock = &v
}

// GetStatestorage returns the Statestorage field value if set, zero value otherwise.
func (o *SuspendVMRequest) GetStatestorage() string {
	if o == nil || IsNil(o.Statestorage) {
		var ret string
		return ret
	}
	return *o.Statestorage
}

// GetStatestorageOk returns a tuple with the Statestorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVMRequest) GetStatestorageOk() (*string, bool) {
	if o == nil || IsNil(o.Statestorage) {
		return nil, false
	}
	return o.Statestorage, true
}

// HasStatestorage returns a boolean if a field has been set.
func (o *SuspendVMRequest) HasStatestorage() bool {
	if o != nil && !IsNil(o.Statestorage) {
		return true
	}

	return false
}

// SetStatestorage gets a reference to the given string and assigns it to the Statestorage field.
func (o *SuspendVMRequest) SetStatestorage(v string) {
	o.Statestorage = &v
}

// GetTodisk returns the Todisk field value if set, zero value otherwise.
func (o *SuspendVMRequest) GetTodisk() int32 {
	if o == nil || IsNil(o.Todisk) {
		var ret int32
		return ret
	}
	return *o.Todisk
}

// GetTodiskOk returns a tuple with the Todisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVMRequest) GetTodiskOk() (*int32, bool) {
	if o == nil || IsNil(o.Todisk) {
		return nil, false
	}
	return o.Todisk, true
}

// HasTodisk returns a boolean if a field has been set.
func (o *SuspendVMRequest) HasTodisk() bool {
	if o != nil && !IsNil(o.Todisk) {
		return true
	}

	return false
}

// SetTodisk gets a reference to the given int32 and assigns it to the Todisk field.
func (o *SuspendVMRequest) SetTodisk(v int32) {
	o.Todisk = &v
}

func (o SuspendVMRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuspendVMRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.Statestorage) {
		toSerialize["statestorage"] = o.Statestorage
	}
	if !IsNil(o.Todisk) {
		toSerialize["todisk"] = o.Todisk
	}
	return toSerialize, nil
}

type NullableSuspendVMRequest struct {
	value *SuspendVMRequest
	isSet bool
}

func (v NullableSuspendVMRequest) Get() *SuspendVMRequest {
	return v.value
}

func (v *NullableSuspendVMRequest) Set(val *SuspendVMRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendVMRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendVMRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendVMRequest(val *SuspendVMRequest) *NullableSuspendVMRequest {
	return &NullableSuspendVMRequest{value: val, isSet: true}
}

func (v NullableSuspendVMRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendVMRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


