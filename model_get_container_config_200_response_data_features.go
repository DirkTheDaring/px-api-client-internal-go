/*
ProxMox VE API

ProxMox VE API

API version: 8.0
Contact: baldur@email.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pxapiobject

import (
	"encoding/json"
)

// checks if the GetContainerConfig200ResponseDataFeatures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetContainerConfig200ResponseDataFeatures{}

// GetContainerConfig200ResponseDataFeatures struct for GetContainerConfig200ResponseDataFeatures
type GetContainerConfig200ResponseDataFeatures struct {
	// Mount /sys in unprivileged containers as `rw` instead of `mixed`. This can break networking under newer (>= v245) systemd-network use.
	ForceRwSys *int32 `json:"force_rw_sys,omitempty"`
	// Allow using 'fuse' file systems in a container. Note that interactions between fuse and the freezer cgroup can potentially cause I/O deadlocks.
	Fuse *int32 `json:"fuse,omitempty"`
	// For unprivileged containers only: Allow the use of the keyctl() system call. This is required to use docker inside a container. By default unprivileged containers will see this system call as non-existent. This is mostly a workaround for systemd-networkd, as it will treat it as a fatal error when some keyctl() operations are denied by the kernel due to lacking permissions. Essentially, you can choose between running systemd-networkd or docker.
	Keyctl *int32 `json:"keyctl,omitempty"`
	// Allow unprivileged containers to use mknod() to add certain device nodes. This requires a kernel with seccomp trap to user space support (5.3 or newer). This is experimental.
	Mknod *int32 `json:"mknod,omitempty"`
	// Allow mounting file systems of specific types. This should be a list of file system types as used with the mount command. Note that this can have negative effects on the container's security. With access to a loop device, mounting a file can circumvent the mknod permission of the devices cgroup, mounting an NFS file system can block the host's I/O completely and prevent it from rebooting, etc.
	Mount *string `json:"mount,omitempty"`
	// Allow nesting. Best used with unprivileged containers with additional id mapping. Note that this will expose procfs and sysfs contents of the host to the guest.
	Nesting *int32 `json:"nesting,omitempty"`
}

// NewGetContainerConfig200ResponseDataFeatures instantiates a new GetContainerConfig200ResponseDataFeatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetContainerConfig200ResponseDataFeatures() *GetContainerConfig200ResponseDataFeatures {
	this := GetContainerConfig200ResponseDataFeatures{}
	return &this
}

// NewGetContainerConfig200ResponseDataFeaturesWithDefaults instantiates a new GetContainerConfig200ResponseDataFeatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetContainerConfig200ResponseDataFeaturesWithDefaults() *GetContainerConfig200ResponseDataFeatures {
	this := GetContainerConfig200ResponseDataFeatures{}
	return &this
}

// GetForceRwSys returns the ForceRwSys field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetForceRwSys() int32 {
	if o == nil || IsNil(o.ForceRwSys) {
		var ret int32
		return ret
	}
	return *o.ForceRwSys
}

// GetForceRwSysOk returns a tuple with the ForceRwSys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetForceRwSysOk() (*int32, bool) {
	if o == nil || IsNil(o.ForceRwSys) {
		return nil, false
	}
	return o.ForceRwSys, true
}

// HasForceRwSys returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasForceRwSys() bool {
	if o != nil && !IsNil(o.ForceRwSys) {
		return true
	}

	return false
}

// SetForceRwSys gets a reference to the given int32 and assigns it to the ForceRwSys field.
func (o *GetContainerConfig200ResponseDataFeatures) SetForceRwSys(v int32) {
	o.ForceRwSys = &v
}

// GetFuse returns the Fuse field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetFuse() int32 {
	if o == nil || IsNil(o.Fuse) {
		var ret int32
		return ret
	}
	return *o.Fuse
}

// GetFuseOk returns a tuple with the Fuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetFuseOk() (*int32, bool) {
	if o == nil || IsNil(o.Fuse) {
		return nil, false
	}
	return o.Fuse, true
}

// HasFuse returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasFuse() bool {
	if o != nil && !IsNil(o.Fuse) {
		return true
	}

	return false
}

// SetFuse gets a reference to the given int32 and assigns it to the Fuse field.
func (o *GetContainerConfig200ResponseDataFeatures) SetFuse(v int32) {
	o.Fuse = &v
}

// GetKeyctl returns the Keyctl field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetKeyctl() int32 {
	if o == nil || IsNil(o.Keyctl) {
		var ret int32
		return ret
	}
	return *o.Keyctl
}

// GetKeyctlOk returns a tuple with the Keyctl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetKeyctlOk() (*int32, bool) {
	if o == nil || IsNil(o.Keyctl) {
		return nil, false
	}
	return o.Keyctl, true
}

// HasKeyctl returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasKeyctl() bool {
	if o != nil && !IsNil(o.Keyctl) {
		return true
	}

	return false
}

// SetKeyctl gets a reference to the given int32 and assigns it to the Keyctl field.
func (o *GetContainerConfig200ResponseDataFeatures) SetKeyctl(v int32) {
	o.Keyctl = &v
}

// GetMknod returns the Mknod field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetMknod() int32 {
	if o == nil || IsNil(o.Mknod) {
		var ret int32
		return ret
	}
	return *o.Mknod
}

// GetMknodOk returns a tuple with the Mknod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetMknodOk() (*int32, bool) {
	if o == nil || IsNil(o.Mknod) {
		return nil, false
	}
	return o.Mknod, true
}

// HasMknod returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasMknod() bool {
	if o != nil && !IsNil(o.Mknod) {
		return true
	}

	return false
}

// SetMknod gets a reference to the given int32 and assigns it to the Mknod field.
func (o *GetContainerConfig200ResponseDataFeatures) SetMknod(v int32) {
	o.Mknod = &v
}

// GetMount returns the Mount field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetMount() string {
	if o == nil || IsNil(o.Mount) {
		var ret string
		return ret
	}
	return *o.Mount
}

// GetMountOk returns a tuple with the Mount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetMountOk() (*string, bool) {
	if o == nil || IsNil(o.Mount) {
		return nil, false
	}
	return o.Mount, true
}

// HasMount returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasMount() bool {
	if o != nil && !IsNil(o.Mount) {
		return true
	}

	return false
}

// SetMount gets a reference to the given string and assigns it to the Mount field.
func (o *GetContainerConfig200ResponseDataFeatures) SetMount(v string) {
	o.Mount = &v
}

// GetNesting returns the Nesting field value if set, zero value otherwise.
func (o *GetContainerConfig200ResponseDataFeatures) GetNesting() int32 {
	if o == nil || IsNil(o.Nesting) {
		var ret int32
		return ret
	}
	return *o.Nesting
}

// GetNestingOk returns a tuple with the Nesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContainerConfig200ResponseDataFeatures) GetNestingOk() (*int32, bool) {
	if o == nil || IsNil(o.Nesting) {
		return nil, false
	}
	return o.Nesting, true
}

// HasNesting returns a boolean if a field has been set.
func (o *GetContainerConfig200ResponseDataFeatures) HasNesting() bool {
	if o != nil && !IsNil(o.Nesting) {
		return true
	}

	return false
}

// SetNesting gets a reference to the given int32 and assigns it to the Nesting field.
func (o *GetContainerConfig200ResponseDataFeatures) SetNesting(v int32) {
	o.Nesting = &v
}

func (o GetContainerConfig200ResponseDataFeatures) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetContainerConfig200ResponseDataFeatures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceRwSys) {
		toSerialize["force_rw_sys"] = o.ForceRwSys
	}
	if !IsNil(o.Fuse) {
		toSerialize["fuse"] = o.Fuse
	}
	if !IsNil(o.Keyctl) {
		toSerialize["keyctl"] = o.Keyctl
	}
	if !IsNil(o.Mknod) {
		toSerialize["mknod"] = o.Mknod
	}
	if !IsNil(o.Mount) {
		toSerialize["mount"] = o.Mount
	}
	if !IsNil(o.Nesting) {
		toSerialize["nesting"] = o.Nesting
	}
	return toSerialize, nil
}

type NullableGetContainerConfig200ResponseDataFeatures struct {
	value *GetContainerConfig200ResponseDataFeatures
	isSet bool
}

func (v NullableGetContainerConfig200ResponseDataFeatures) Get() *GetContainerConfig200ResponseDataFeatures {
	return v.value
}

func (v *NullableGetContainerConfig200ResponseDataFeatures) Set(val *GetContainerConfig200ResponseDataFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableGetContainerConfig200ResponseDataFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableGetContainerConfig200ResponseDataFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetContainerConfig200ResponseDataFeatures(val *GetContainerConfig200ResponseDataFeatures) *NullableGetContainerConfig200ResponseDataFeatures {
	return &NullableGetContainerConfig200ResponseDataFeatures{value: val, isSet: true}
}

func (v NullableGetContainerConfig200ResponseDataFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetContainerConfig200ResponseDataFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


